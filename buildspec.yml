version: 0.2

phases:
  install:
    runtime-versions:
      java: openjdk11
     
  pre_build:
    commands:
    
      
      - aws --version
      #- $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - REPOSITORY_URI=$TemplateURL
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      #- IMAGE_TAG=${COMMIT_HASH:=latest}
     # - echo Nothing to do in the pre_build phase...
     # - mvn package sonar:sonar -Dsonar.host.url=$Host -Dsonar.login=$Login -Dsonar.login=$Username -Dsonar.password=$Password -Dsonar.branch.name=$Branch -Dsonar.projectKey=$Project
      #- sleep 5
      #- curl -u $Username:$Password $Host/api/qualitygates/project_status?projectKey=org.example:messageUtil >result.json
      #- cat result.json
      #- OUTPUT="$(jq -r '.projectStatus.status' result.json)"
      #- echo "${OUTPUT}"
      #- |
       # if [ "$OUTPUT" != "OK" ] ;
       # then  
        #{
         #echo "Build failed due to SonarQube quality gate failure";
          #exit 1;
         #}
        #fi      
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image... 
      - appVersion=$(cat version.txt )
      - timestamp=$(date -u '+%Y-%m-%d_%H-%M-%S_%Z')
      - buildID=$(echo $CODEBUILD_BUILD_ID | awk -F':' '{print $2}')
      - srcVer=$CODEBUILD_SOURCE_VERSION
      - echo $srcVer
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION
      - echo "printing the branch name $GITHUB_BRANCH_NAME"
      - indx=$(echo $CODEBUILD_SOURCE_VERSION | grep -q ^arn ; echo $?)
        if [ "$indx" -eq 0 ]; then
        srcVer=$CODEBUILD_RESOLVED_SOURCE_VERSION
        fi
      - artifactversion=$(echo $appVersion.$buildID.$srcVer.$timestamp)
      - buildversion=$(echo $appVersion.$buildID.$srcVer.$timestamp)
      - artifactname=$(echo $artifactversion.tar.gz)
      - tar -zcvf $artifactname *
      - aws s3 cp $artifactname s3://bucketkops/los/ --sse
      - aws s3api put-object --bucket bucketkops --key los/$artifactname --body $artifactname
      #- aws cloudformation create-stack --stack-name teststack --template-body file://simples3cft.json --region 'us-east-1'
      #- aws cloudformation create-stack --stack-name tests3stack --template-body file://tests3cft.json --region 'us-east-1' 
      #- aws cloudformation update-stack --stack-name teststack --template-body file://simples3cft.json --region 'us-east-1'
      #- aws cloudformation delete-stack --stack-name teststack --region 'us-east-1'
   
      #- docker build -t $REPOSITORY_URI:latest .
      #- docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:latest
      # - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
      #- echo Build started on `date`
      #- mvn install
      #- snyk auth $SNYK_AUTH_TOKEN
      #- echo `pwd`
      #- ls -ltr
      #- chmod 755 ./Dockerfile
      #- ls -ltr
      #- snyk test --show-vulnerable-paths=false
      #- snyk test --docker 202771655335.dkr.ecr.us-east-1.amazonaws.com/los-poc:latest --file=Dockerfile
      
      #- snyk test --docker $REPOSITORY_URI:latest 
      #- snyk monitor --docker $REPOSITORY_URI:latest 
      #- npm install -g snyk
      #- snyk test 
      #- snyk monitor
  post_build:
    commands:
      #- echo Build completed on `date`
      #- echo Pushing the Docker images...
      #- docker push $REPOSITORY_URI:latest
      
     
